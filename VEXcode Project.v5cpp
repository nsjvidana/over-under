{"mode":"Text","textContent":"/*----------------------------------------------------------------------------*/\n/*                                                                            */\n/*    Module:       main.cpp                                                  */\n/*    Author:       Nilson JVP                                                */\n/*    Created:      10/13/2023, 10:22:01 AM                                   */\n/*    Description:  V5 project                                                */\n/*                                                                            */\n/*----------------------------------------------------------------------------*/\n\n#include \"vex.h\"\n\nusing namespace vex;\n\n// A global instance of competition\n// competition Competition;\n\nvex::brain       Brain;\n\ncontroller Controller1 = controller(primary);\n\nmotor LeftMotor = motor(PORT2, ratio6_1, false);\nmotor RightMotor = motor(PORT1, ratio6_1, true);\n\ndrivetrain Drivetrain = drivetrain(LeftMotor, RightMotor, 319.19, 228.6, 190.5, mm, 1);\n\nmotor Feeder = motor(PORT16, ratio18_1, false);\nmotor FeederJoint = motor(PORT13, ratio36_1, false);\n\n\n//in inches\ndouble wheelRadius = 4;\ndouble circumference = 2 * M_PI * wheelRadius;\ndouble bodyDiameter = 6; \ndouble driveVelocity = 30;\ndouble turnVelocity = 20;\n\n\n/*---------------------------------------------------------------------------*/\n/*                          Pre-Autonomous Functions                         */\n/*                                                                           */\n/*  You may want to perform some actions before the competition starts.      */\n/*  Do them in the following function.  You must return from this function   */\n/*  or the autonomous and usercontrol tasks will not be started.  This       */\n/*  function is only called once after the V5 has been powered on and        */\n/*  not every time that the robot is disabled.                               */\n/*---------------------------------------------------------------------------*/\n\nvoid pre_auton(void) {\n  // All activities that occur before the competition starts\n  // Example: clearing encoders, setting servo positions, ...\n  FeederJoint.setStopping(brakeType::brake);\n  FeederJoint.setVelocity(60, percent);\n  Drivetrain.setTurnVelocity(50 , percent);\n  Drivetrain.setDriveVelocity(50, percent);\n}\n\n\n/***************************Autonomous driving utils***************************/\n\nvoid driveFor(double distanceInInches) {\n  double amountOfTurns = (distanceInInches / circumference)*2;\n\n  LeftMotor.setVelocity(driveVelocity, percent);\n  RightMotor.setVelocity(driveVelocity, percent);\n\n  LeftMotor.spinFor(amountOfTurns*360, deg, false);\n  RightMotor.spinFor(amountOfTurns*360, deg);\n}\n\nvoid turn90Deg(int direction) {\n  double arcLength = (circumference*90)/360;\n  double degreesToTurn = (arcLength / circumference)*360*2;\n\n  LeftMotor.setVelocity(turnVelocity, percent);\n  RightMotor.setVelocity(turnVelocity, percent);\n  \n  LeftMotor.spinFor(degreesToTurn*-direction, deg, false);\n  RightMotor.spinFor(degreesToTurn*direction, deg);\n}\n\n\n/*---------------------------------------------------------------------------*/\n/*                                                                           */\n/*                              Autonomous Task                              */\n/*                                                                           */\n/*  This task is used to control your robot during the autonomous phase of   */\n/*  a VEX Competition.                                                       */\n/*                                                                           */\n/*  You must modify the code to add your own robot specific commands here.   */\n/*---------------------------------------------------------------------------*/\n\nvoid autonomous(void) {\n  Brain.Screen.print(\"Mode: Auto\");\n\n  LeftMotor.setVelocity(20, percent);\n  RightMotor.setVelocity(20, percent);\n  \n  Drivetrain.setDriveVelocity(20, percent);  \n\n  //Drivetrain controls\n  Drivetrain.driveFor(60,vex::distanceUnits::in, true);\n  Drivetrain.turnFor(-90, deg);\n\n  Drivetrain.driveFor(-6, vex::distanceUnits::in, true);\n\n  //drop the triball and take the feeder back in to not bash the feeder\n  FeederJoint.spinFor(1300, deg);\n  Feeder.spinFor(-800, deg);\n  FeederJoint.spinFor(-1300, deg);\n\n  //ram the ball under the net\n  Drivetrain.setDriveVelocity(80, percent);\n  Drivetrain.driveFor(24, vex::distanceUnits::in, true); \n  \n  Drivetrain.setDriveVelocity(50, percent);\n  Drivetrain.driveFor(-6, vex::distanceUnits::in, true);\n  Drivetrain.turnFor(180, deg);\n\n  //extrude feeder and take the triball\n  FeederJoint.spinFor(1300, deg);\n  Feeder.spinFor(800, deg);\n  FeederJoint.spinFor(-1300, deg);\n\n  Drivetrain.turnFor(180, deg);\n\n  //drop the triball and take the feeder back in\n  FeederJoint.spinFor(1300, deg);\n  Feeder.spinFor(-800, deg);\n  FeederJoint.spinFor(-1300, deg);\n\n  Drivetrain.setDriveVelocity(80, percent);\n  Drivetrain.driveFor(24, vex::distanceUnits::in, true); //ram the ball under the net\n  Drivetrain.setDriveVelocity(50, percent);  \n}\n\n/*---------------------------------------------------------------------------*/\n/*                                                                           */\n/*                              User Control Task                            */\n/*                                                                           */\n/*  This task is used to control your robot during the user control phase of */\n/*  a VEX Competition.                                                       */\n/*                                                                           */\n/*  You must modify the code to add your own robot specific commands here.   */\n/*---------------------------------------------------------------------------*/\nvoid usercontrol(void) {\n  Brain.Screen.clearLine(1);\n  Brain.Screen.print(\"Mode: Drive\");\n\n  LeftMotor.setVelocity(20, percent);\n  RightMotor.setVelocity(20, percent);\n  while (1) {\n    //Drivetrain control\n    int hAxis = Controller1.Axis1.position();\n    int vAxis = Controller1.Axis3.position();\n    LeftMotor.setVelocity(vAxis + hAxis, percent);\n    RightMotor.setVelocity(vAxis - hAxis, percent);\n    LeftMotor.spin(forward);\n    RightMotor.spin(forward);\n\n    //Feeder control (incomplete)\n    //  When R1 is pressed, go backward.\n    //  When R2 is pressed, go forward.\n    //  When both are pressed, don't move.\n    //  Hold X to spin feeder faster\n    int feederSpeed = Controller1.ButtonX.pressing() ? 200 : 80;\n    int feederDirection = Controller1.ButtonR2.pressing() - Controller1.ButtonR1.pressing();\n    Feeder.setVelocity(feederSpeed*feederDirection, percent);\n\n    //L1 and L2 for controlling feeder joint\n    int feederJointDirection = Controller1.ButtonL1.pressing() - Controller1.ButtonL2.pressing();\n    FeederJoint.setVelocity(50*feederJointDirection, percent);\n    Feeder.spin(forward);\n    FeederJoint.spin(forward);\n\n    wait(20, msec); // Sleep the task for a short amount of time to\n                    // prevent wasted resources.\n  }\n}\n\n//\n// Main will set up the competition functions and callbacks.\n//\nint main() {\n  // Set up callbacks for autonomous and driver control periods.\n  // Competition.autonomous(autonomous);\n  // Competition.drivercontrol(usercontrol);\n  // autonomous();\n  driveFor(12);\n  \n  // Run the pre-autonomous function.\n  pre_auton();\n\n  // Prevent main from exiting with an infinite loop.\n  while (true) {\n    wait(100, msec);\n  }\n}\n","textLanguage":"cpp","rconfig":[],"slot":0,"platform":"V5","sdkVersion":"20220726.10.00.00","appVersion":"2.4.0","minVersion":"2.4.0","fileFormat":"1.2.0","icon":"","targetBrainGen":"First","target":"Physical"}